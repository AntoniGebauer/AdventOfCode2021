import UIKit

func count2orMore() -> Int {
    var count = 0
    for i in 0...diagram.count - 1 {
        for j in 0...diagram[i].count - 1 {
            if diagram[i][j] > 1 {
                count += 1
            }
        }
    }
    return count
}

func checkIfHorizontal(input: [Int]) -> Bool {
    return input[0] - input[2] != 0
}

func checkIfVertical(input: [Int]) -> Bool {
    return input[1] - input[3] != 0
}

func checkIfBoth (input: [Int]) -> Bool {
    return checkIfVertical(input: input) && checkIfHorizontal(input: input)
}

func fillDiagramHorizontal(y1: Int, x1: Int, x2: Int) {
    let max = max(x1, x2)
    let min = min(x1, x2)
    for x in min...max {
        diagram[y1][x] += 1
    }
}

func fillDiagramVertical(x1: Int, y1: Int, y2: Int) {
    let max = max(y1, y2)
    let min = min(y1, y2)
    for y in min...max {
        diagram[y][x1] += 1
    }
}

func fillDiagram(x1: Double, x2: Double, y1: Double, y2: Double) {
    if x1 > x2 && y1 < y2 || x1 < x2 && y1 > y2 {
        let miny = min(y1, y2)
        let maxy = max(y1, y2)
        let startx = max(x1, x2)
        var x = Int(startx)
        for y in Int(miny)...Int(maxy) {
            diagram[y][x] += 1
            x -= 1
        }
    } else {
        let miny = min(y1, y2)
        let maxy = max(y1, y2)
        let startx = min(x1, x2)
        var x = Int(startx)
        for y in Int(miny)...Int(maxy) {
            diagram[y][x] += 1
            x += 1
        }
    }
}

func populateData(array: [[Int]]) {
    for i in 0...array.count - 1 {
        if !checkIfBoth(input: array[i]) {
            if checkIfVertical(input: array[i]) {
                fillDiagramVertical(x1: array[i][0], y1: array[i][1], y2: array[i][3])
            }
            if checkIfHorizontal(input: array[i]) {
                fillDiagramHorizontal(y1: array[i][1], x1: array[i][0], x2: array[i][2])
            }
        } else {
            fillDiagram(x1: Double(array[i][0]), x2: Double(array[i][2]), y1: Double(array[i][1]), y2: Double(array[i][3]))
        }
    }
}

func printDiagram (array: [[Int]]) {
    for i in 0...array.count - 1 {
        for j in 0...array[i].count - 1 {
            print(array[i][j], terminator: "")
        }
        print()
    }
}

func initializeDiagram (maxes: [Int]) -> [[Int]] {
    let array = [[Int]](repeating: [Int](repeating: 0, count: maxes[0]+1), count: maxes[1]+1)
    return array
}

func findMax(array: [[Int]]) -> [Int] {
    var maxX = 0
    var maxY = 0
    for i in 0...array.count - 1 {
        if array[i][0] > maxX {
            maxX = array[i][0]
        }
        for j in 0...array[i].count - 1 {
            if j%2 == 0 && array[i][j] > maxX {
                maxX = array[i][j]
            }
            if j%2 != 0 && array[i][j] > maxY {
                maxY = array[i][j]
            }
        }
    }
    return [maxX, maxY]
}

//format input data

let fileURL = Bundle.main.url(forResource: "File", withExtension: "txt")
let content = try String(contentsOf: fileURL!, encoding: String.Encoding.utf8)
var inputArray = content.components(separatedBy: "\n")

inputArray.remove(at: inputArray.count - 1)

var stringArray: [[String]] = []

for i in 0...inputArray.count - 1 {
    stringArray.append(inputArray[i].replacingOccurrences(of: " -> ", with: ",").components(separatedBy: ","))
}

var intArray: [[Int]] = []

for i in 0...stringArray.count - 1 {
    intArray.append([Int]())
    for j in 0...stringArray[i].count - 1 {
        intArray[i].append(Int(stringArray[i][j])!)
    }
}

//diagram creation

public var diagram: [[Int]] = []
diagram = initializeDiagram(maxes: findMax(array: intArray))
populateData(array: intArray)
//printDiagram(array: diagram)
print(count2orMore())



