import UIKit

extension String {
    var decimalToBinary: String { return String(Int(self) ?? 0, radix: 2) }
    var binaryToInt    : Int    { return Int(strtoul(self, nil, 2))       }
}

let fileURL = Bundle.main.url(forResource: "File", withExtension: "txt")
let content = try String(contentsOf: fileURL!, encoding: String.Encoding.utf8)
var inputArray = content.components(separatedBy: "\n")
inputArray.remove(at: inputArray.count - 1)

//prepare empty integer array the size of input data sample
var results = [Int](repeating: 0, count: inputArray[0].count)

for input in inputArray {
    let digits = input.compactMap{Int(String($0))}
    for i in 0...input.count - 1 {
        results[i] += digits[i]
    }
}

var binaryGamma = ""
var binaryEpsilon = ""


for i in 0...results.count - 1 {
    if results[i] > (inputArray.count - 1) / 2 {
        binaryGamma += "1"
        binaryEpsilon += "0"
    } else {
        binaryGamma += "0"
        binaryEpsilon += "1"
    }
}

 print(Int(binaryGamma.binaryToInt) * Int(binaryEpsilon.binaryToInt))

//part 2

func getResult(binaryString: String, inputArray : [String]) -> String {
    let template = binaryString.compactMap{Int(String($0))}
    var tempArray = inputArray
    var result: [String] = []

    for i in 0...template.count - 1 {
        for j in 0...tempArray.count - 1 {
            let sample = tempArray[j].compactMap{Int(String($0))}
            if template[i] == sample[i] {
                result.append(tempArray[j])
            }
        }
        if result.count == 1 {
            break
        } else {
            tempArray = result
            result.removeAll()
        }
    }
    return result[0]
}

let oxygenGeneratorRating = getResult(binaryString: binaryGamma, inputArray: inputArray)
let co2ScrubberRating = getResult(binaryString: binaryEpsilon, inputArray: inputArray)

print(Int(oxygenGeneratorRating.binaryToInt) * Int(co2ScrubberRating.binaryToInt))
